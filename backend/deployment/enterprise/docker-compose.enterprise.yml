version: '3.8'

name: ai-platform-enterprise

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${CLIENT_DB_NAME:-ai_agent_platform_enterprise}
      POSTGRES_USER: ${CLIENT_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${CLIENT_DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CLIENT_DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ../..
      dockerfile: Dockerfile.enterprise
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${CLIENT_DB_USER:-postgres}:${CLIENT_DB_PASSWORD}@postgres:5432/${CLIENT_DB_NAME:-ai_agent_platform_enterprise}
      - REDIS_URL=redis://redis:6379

      # Environment Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - CLIENT_NAME=${CLIENT_NAME}
      - CLIENT_DOMAIN=${CLIENT_DOMAIN}

      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # Feature Flags for Enterprise
      - ENABLE_SSO=${ENABLE_SSO:-false}
      - SSO_PROVIDER=${SSO_PROVIDER:-saml}
      - SSO_METADATA_URL=${SSO_METADATA_URL}

      # External Services
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERP_API_KEY=${SERP_API_KEY}

      # Enterprise Features
      - ENABLE_AUDIT_LOGGING=${ENABLE_AUDIT_LOGGING:-true}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-365}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped

  # Enterprise Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16